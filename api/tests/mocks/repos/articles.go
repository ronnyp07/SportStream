// Code generated by MockGen. DO NOT EDIT.
// Source: api/internal/domain/ports/repos/articles.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ronnyp07/SportStream/api/internal/domain/models"
)

// MockIArticlesRepos is a mock of IArticlesRepos interface.
type MockIArticlesRepos struct {
	ctrl     *gomock.Controller
	recorder *MockIArticlesReposMockRecorder
}

// MockIArticlesReposMockRecorder is the mock recorder for MockIArticlesRepos.
type MockIArticlesReposMockRecorder struct {
	mock *MockIArticlesRepos
}

// NewMockIArticlesRepos creates a new mock instance.
func NewMockIArticlesRepos(ctrl *gomock.Controller) *MockIArticlesRepos {
	mock := &MockIArticlesRepos{ctrl: ctrl}
	mock.recorder = &MockIArticlesReposMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticlesRepos) EXPECT() *MockIArticlesReposMockRecorder {
	return m.recorder
}

// GetByExternalID mocks base method.
func (m *MockIArticlesRepos) GetByExternalID(ctx context.Context, externalID int) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", ctx, externalID)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalID indicates an expected call of GetByExternalID.
func (mr *MockIArticlesReposMockRecorder) GetByExternalID(ctx, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockIArticlesRepos)(nil).GetByExternalID), ctx, externalID)
}

// GetByID mocks base method.
func (m *MockIArticlesRepos) GetByID(ctx context.Context, id int) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIArticlesReposMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIArticlesRepos)(nil).GetByID), ctx, id)
}

// GetPaginatedArticles mocks base method.
func (m *MockIArticlesRepos) GetPaginatedArticles(ctx context.Context, page, pageSize int) (*models.PaginatedArticles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedArticles", ctx, page, pageSize)
	ret0, _ := ret[0].(*models.PaginatedArticles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaginatedArticles indicates an expected call of GetPaginatedArticles.
func (mr *MockIArticlesReposMockRecorder) GetPaginatedArticles(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedArticles", reflect.TypeOf((*MockIArticlesRepos)(nil).GetPaginatedArticles), ctx, page, pageSize)
}
